┌─────────────────────────────────────────────────────────────────────────────────┐
│                    AroBot Agentic RAG Multi-Modal Chatbot System                │
│                        Detailed Workflow & Tool Selection Diagram               │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              SYSTEM ARCHITECTURE                               │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🌐 FRONTEND LAYER                                                             │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ • Web UI (chat_enhanced.html)                                          │    │
│  │ • Static Assets (icons, favicon)                                       │    │
│  │ • API Client Integration                                               │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘
     ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│  🚀 API LAYER (FastAPI)                                                       │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ • Main Application (api/main.py)                                       │    │
│  │ • Middleware Stack:                                                    │    │
│  │   - Error Handler Middleware                                           │    │
│  │   - Rate Limiter Middleware                                            │    │
│  │   - Request Logger Middleware                                          │    │
│  │ • CORS Configuration                                                   │    │
│  │ • Health Check Endpoints                                               │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘
     ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│  🛣️ ROUTING LAYER                                                              │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ API v1 (Stable):                                                       │    │
│  │ • /api/v1/agent - Unified Agent Endpoint                              │    │
│  │ • /api/v1/health - Health Check                                       │    │
│  │ • /api/v1/legacy - Legacy Endpoints                                   │    │
│  │                                                                        │    │
│  │ API v2 (Latest):                                                       │    │
│  │ • /api/v2/chat - Enhanced Chat                                        │    │
│  │ • /api/v2/multimodal - Multi-modal Processing                         │    │
│  │ • /api/v2/tools - Tool Management                                     │    │
│  │                                                                        │    │
│  │ Admin:                                                                 │    │
│  │ • /admin/analytics - Usage Analytics                                  │    │
│  │ • /admin/system - System Management                                   │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘
     ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│  🤖 AGENT CORE LAYER (LLM-as-Agent Architecture)                              │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ • LLMAgent (core/agent_core.py)                                       │    │
│  │ • Tool Registry (core/enhanced_tool_registry.py)                      │    │
│  │ • Modular LLM Handler (core/llm_modular.py)                           │    │
│  │ • Medical Agent (agents/medical_agent.py)                             │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                        DETAILED WORKFLOW PROCESS                               │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  📥 STEP 1: REQUEST RECEPTION & INITIALIZATION                                │
└─────────────────────────────────────────────────────────────────────────────────┘

[User Input] → [FastAPI Router] → [Middleware Processing] → [Agent Core]
     ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│  Input Types Supported:                                                        │
│  • Text Queries (medical questions, symptoms, general chat)                    │
│  • Image Files (prescriptions, medical diagrams, photos)                      │
│  • PDF Files (medical documents, research papers)                             │
│  • Multi-modal Combinations (text + image, text + PDF)                        │
└─────────────────────────────────────────────────────────────────────────────────┘
     ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│  Session Management:                                                           │
│  • Check for existing session_id                                              │
│  • Initialize new session if needed (MCP Handler)                             │
│  • Load conversation context from memory                                      │
│  • Generate unique request ID for tracking                                    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  📊 STEP 2: INPUT ANALYSIS & CLASSIFICATION                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Input Description Generation:                                                 │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ def _describe_input(text_input, image_data, pdf_data):                 │    │
│  │     if image_data:                                                     │    │
│  │         return "Image file uploaded for analysis"                      │    │
│  │     elif pdf_data:                                                     │    │
│  │         return "PDF file uploaded for analysis"                        │    │
│  │     elif text_input:                                                   │    │
│  │         return f"Text query: {text_input}"                             │    │
│  │     else:                                                              │    │
│  │         return "Empty request"                                         │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘
     ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│  Medical Intent Detection:                                                     │
│  • Medicine queries (drug names, dosages, side effects)                       │
│  • Prescription analysis requests                                             │
│  • General medical questions                                                  │
│  • Anatomy/physiology queries                                                 │
│  • Policy/regulation questions                                                │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🔧 STEP 3: TOOL SELECTION PROCESS                                            │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Tool Selection Strategy:                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ 1. Cache Check:                                                        │    │
│  │    • Generate cache key from input + context                           │    │
│  │    • Return cached selection if available                              │    │
│  │                                                                        │    │
│  │ 2. Smart Pre-filtering:                                                │    │
│  │    • Image files → analyze_image tool                                  │    │
│  │    • PDF files → analyze_pdf tool                                      │    │
│  │    • Weather queries → get_weather tool                                │    │
│  │                                                                        │    │
│  │ 3. LLM-based Selection:                                                │    │
│  │    • Send input + context to LLM                                       │    │
│  │    • LLM analyzes and selects appropriate tool(s)                      │    │
│  │    • JSON response with tool name and reasoning                        │    │
│  │                                                                        │    │
│  │ 4. Fallback Selection:                                                 │    │
│  │    • Rule-based selection if LLM fails                                 │    │
│  │    • Pattern matching for common query types                           │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Available Tools (Priority-based):                                             │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ Priority 5 (Highest):                                                  │    │
│  │ • analyze_text - Medical questions, symptoms, general health queries   │    │
│  │                                                                        │    │
│  │ Priority 4 (High):                                                     │    │
│  │ • analyze_image - Image analysis and prescription processing           │    │
│  │ • get_medicine_info - Drug information, prices, Bangladesh brands      │    │
│  │                                                                        │    │
│  │ Priority 3 (Medium):                                                   │    │
│  │ • analyze_pdf - PDF document analysis                                  │    │
│  │ • access_memory - Previous conversation history                        │    │
│  │                                                                        │    │
│  │ Priority 2 (Low):                                                      │    │
│  │ • web_search - Current information not in knowledge base               │    │
│  │ • get_weather - Weather conditions and forecasts                       │    │
│  │                                                                        │    │
│  │ Priority 1 (Lowest):                                                   │    │
│  │ • Utility tools and fallback options                                   │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🚀 STEP 4: TOOL EXECUTION PROCESS                                            │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Tool Execution Flow:                                                          │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ for each selected tool:                                                │    │
│  │   1. Validate tool parameters                                          │    │
│  │   2. Check circuit breaker status                                      │    │
│  │   3. Execute tool function with timeout                                │    │
│  │   4. Capture execution result and metadata                             │    │
│  │   5. Update tool statistics                                            │    │
│  │   6. Handle errors and retries                                         │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Tool-Specific Execution Details:                                              │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ 1. analyze_text Tool:                                                  │    │
│  │    • Check for greetings → LLM greeting response                       │    │
│  │    • Medical queries → RAG context retrieval                           │    │
│  │    • General queries → LLM with medical system prompt                  │    │
│  │    • Generate structured medical response                              │    │
│  │                                                                        │    │
│  │ 2. analyze_image Tool:                                                 │    │
│  │    • OCR processing (PaddleOCR)                                        │    │
│  │    • Image classification (prescription vs general)                    │    │
│  │    • LLM vision analysis                                               │    │
│  │    • Structured response generation                                    │    │
│  │                                                                        │    │
│  │ 3. get_medicine_info Tool:                                             │    │
│  │    • Medicine name extraction and normalization                        │    │
│  │    • RAG context retrieval from medical knowledge base                 │    │
│  │    • Web search for Bangladesh-specific information                    │    │
│  │    • Structured medicine information response                          │    │
│  │                                                                        │    │
│  │ 4. web_search Tool:                                                    │    │
│  │    • Query optimization for medical searches                           │    │
│  │    • DuckDuckGo API integration                                       │    │
│  │    • Result filtering and ranking                                      │    │
│  │    • Context integration with main response                            │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🔄 STEP 5: RAG (RETRIEVAL-AUGMENTED GENERATION) PROCESS                       │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  RAG Context Retrieval:                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ 1. Query Processing:                                                   │    │
│  │    • Generate embeddings for user query                                │    │
│  │    • Query Pinecone vector database                                    │    │
│  │    • Retrieve top-k relevant chunks                                    │    │
│  │                                                                        │    │
│  │ 2. Context Enhancement:                                                │    │
│  │    • Filter and rank retrieved chunks                                  │    │
│  │    • Remove duplicates and irrelevant content                          │    │
│  │    • Combine with conversation context                                 │    │
│  │                                                                        │    │
│  │ 3. LLM Integration:                                                    │    │
│  │    • Inject context into LLM prompt                                    │    │
│  │    • Use medical system prompts                                        │    │
│  │    • Generate context-aware responses                                  │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Knowledge Base Sources:                                                       │
│  • Medical textbooks and references                                           │
│  │ • Bangladesh medicine database (pharma.db)                               │
│  │ • Prescription data (129 images)                                         │
│  │ • Web-scraped medicine data (CSV files)                                  │
│  │ • Clinical guidelines and protocols                                      │
│  │ • Drug interaction databases                                             │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  📝 STEP 6: RESPONSE GENERATION & SYNTHESIS                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Response Synthesis Process:                                                   │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ 1. Tool Result Aggregation:                                            │    │
│  │    • Combine results from multiple tools                               │    │
│  │    • Resolve conflicts and inconsistencies                             │    │
│  │    • Prioritize information by source reliability                      │    │
│  │                                                                        │    │
│  │ 2. LLM Response Generation:                                             │    │
│  │    • Use medical system prompts                                        │    │
│  │    • Generate structured, professional responses                       │    │
│  │    • Include source attribution and disclaimers                        │    │
│  │                                                                        │    │
│  │ 3. Quality Assurance:                                                   │    │
│  │    • Validate response completeness                                     │    │
│  │    • Check for medical accuracy                                         │    │
│  │    • Add appropriate disclaimers                                        │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Response Format:                                                              │
│  • Structured medical information                                             │
│  • Source citations and references                                            │
│  • Safety disclaimers and warnings                                            │
│  • Bangladesh-specific context when relevant                                  │
│  • Professional medical language                                              │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  💾 STEP 7: MEMORY & SESSION MANAGEMENT                                       │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  MCP (Model Context Protocol) Handler:                                         │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ 1. Session Management:                                                 │    │
│  │    • Create and maintain user sessions                                 │    │
│  │    • Store conversation history                                        │    │
│  │    • Track user preferences and context                                │    │
│  │                                                                        │    │
│  │ 2. Memory Operations:                                                  │    │
│  │    • Add user messages to session                                      │    │
│  │    • Store assistant responses                                         │    │
│  │    • Retrieve conversation context                                      │    │
│  │    • Manage session lifecycle                                          │    │
│  │                                                                        │    │
│  │ 3. Context Retrieval:                                                  │    │
│  │    • Load recent conversation history                                  │    │
│  │    • Provide context for tool selection                                │    │
│  │    • Enable follow-up question handling                                │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  📊 STEP 8: MONITORING & OBSERVABILITY                                        │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  LangSmith Integration:                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ Traced Functions:                                                       │    │
│  │ • MCP Handler operations (@traceable)                                  │    │
│  │ • Web search operations                                                │    │
│  │ • OCR processing functions                                             │    │
│  │ • LLM text and vision completions                                      │    │
│  │ • Medical query processing                                             │    │
│  │ • Prescription analysis                                                │    │
│  │                                                                        │    │
│  │ Monitoring Metrics:                                                    │    │
│  │ • Request/response times                                               │    │
│  │ • Tool execution success rates                                         │    │
│  │ • Token usage and costs                                                │    │
│  │ • Error rates and patterns                                             │    │
│  │ • User session analytics                                               │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Error Handling & Recovery:                                                    │
│  • Circuit breaker pattern for failing tools                                 │
│  • Graceful degradation with fallback responses                               │
│  • Comprehensive error logging and monitoring                                 │
│  • User-friendly error messages                                              │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🔄 COMPLETE WORKFLOW EXAMPLE                                                  │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Example: "What are the side effects of paracetamol?"                          │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ 1. Request Reception:                                                  │    │
│  │    • User sends text query via API                                     │    │
│  │    • FastAPI routes to /api/v1/agent                                   │    │
│  │    • Middleware processes request                                       │    │
│  │                                                                        │    │
│  │ 2. Input Analysis:                                                     │    │
│  │    • Input: "Text query: What are the side effects of paracetamol?"    │    │
│  │    • Medical intent detected (medicine query)                          │    │
│  │    • Session ID: user_123_2024-01-15                                   │    │
│  │                                                                        │    │
│  │ 3. Tool Selection:                                                     │    │
│  │    • Cache check: No cached selection                                  │    │
│  │    • Pre-filtering: Medicine query detected                            │    │
│  │    • LLM selection: get_medicine_info tool                             │    │
│  │    • Reasoning: "Medicine-specific information request"                │    │
│  │                                                                        │    │
│  │ 4. Tool Execution:                                                     │    │
│  │    • Extract medicine name: "paracetamol"                              │    │
│  │    • RAG context retrieval: 4 relevant chunks                          │    │
│  │    • Web search: Bangladesh-specific information                       │    │
│  │    • LLM processing: Generate structured response                      │    │
│  │                                                                        │    │
│  │ 5. Response Generation:                                                │    │
│  │    • Combine RAG context + web search results                          │    │
│  │    • Generate structured medical response                              │    │
│  │    • Add safety disclaimers                                            │    │
│  │    • Include source attribution                                        │    │
│  │                                                                        │    │
│  │ 6. Memory Update:                                                      │    │
│  │    • Store user message in session                                     │    │
│  │    • Store assistant response                                          │    │
│  │    • Update conversation context                                       │    │
│  │                                                                        │    │
│  │ 7. Response Delivery:                                                  │    │
│  │    • Return structured response to user                                │    │
│  │    • Log metrics and trace data                                        │    │
│  │    • Update tool usage statistics                                      │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Example: Prescription Image Analysis                                          │
│  ┌─────────────────────────────────────────────────────────────────────────┐    │
│  │ 1. Request Reception:                                                  │    │
│  │    • User uploads prescription image                                   │    │
│  │    • File type: image/jpeg                                             │    │
│  │    • File size: 2.3MB                                                  │    │
│  │                                                                        │    │
│  │ 2. Input Analysis:                                                     │    │
│  │    • Input: "Image file uploaded for analysis"                        │    │
│  │    • Image type detected                                               │    │
│  │    • Prescription analysis intent inferred                             │    │
│  │                                                                        │    │
│  │ 3. Tool Selection:                                                     │    │
│  │    • Pre-filtering: Image file detected                                │    │
│  │    • Selected tool: analyze_image                                      │    │
│  │    • Reasoning: "Image input requires OCR and analysis"                │    │
│  │                                                                        │    │
│  │ 4. Tool Execution:                                                     │    │
│  │    • OCR processing: Extract text from image                           │    │
│  │    • Image classification: Prescription detected                       │    │
│  │    • LLM analysis: Process OCR text with medical context               │    │
│  │    • Medication extraction: Identify drugs and dosages                 │    │
│  │                                                                        │    │
│  │ 5. Response Generation:                                                │    │
│  │    • Structured prescription analysis                                  │    │
│  │    • Medication list with dosages                                      │    │
│    │    • Doctor information and date                                     │    │
│  │    • Safety warnings and instructions                                  │    │
│  │                                                                        │    │
│  │ 6. Memory Update:                                                      │    │
│  │    • Store prescription analysis result                                │    │
│  │    • Link to user session                                              │    │
│  │    • Enable follow-up questions                                        │    │
│  └─────────────────────────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🏗️ SYSTEM COMPONENTS & DEPENDENCIES                                          │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Core Dependencies:                                                            │
│  • FastAPI - Web framework                                                    │
│  • Ollama - Local LLM inference                                               │
│  • LangChain - LLM framework and tooling                                      │
│  • Pinecone - Vector database for RAG                                         │
│  • PaddleOCR - OCR processing                                                 │
│  • Transformers - Hugging Face models                                         │
│  • Sentence Transformers - Text embeddings                                    │
│  • SQLite - Local database storage                                            │
│  • MCP - Model Context Protocol for memory                                    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  External Services:                                                            │
│  • LangSmith - LLM monitoring and tracing                                     │
│  • DuckDuckGo - Web search API                                                │
│  • OpenMeteo - Weather API                                                    │
│  • Pinecone Cloud - Vector database hosting                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Data Sources:                                                                 │
│  • Medical knowledge base (vector embeddings)                                 │
│  • Bangladesh medicine database (pharma.db)                                   │
│  • Prescription images (129 samples)                                          │
│  • Web-scraped medicine data (CSV files)                                      │
│  • Clinical guidelines and protocols                                          │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🎯 KEY FEATURES & CAPABILITIES                                               │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Medical Capabilities:                                                         │
│  • Prescription analysis and medication extraction                            │
│  • Medicine information lookup with Bangladesh context                        │
│  • Drug interaction checking                                                  │
│  • Dosage and administration guidance                                         │
│  • Side effects and contraindications                                         │
│  • Clinical guidelines and protocols                                          │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Technical Capabilities:                                                       │
│  • Multi-modal input processing (text, image, PDF)                            │
│  • Intelligent tool selection and routing                                     │
│  • RAG-enhanced responses with source attribution                             │
│  • Session-based conversation memory                                          │
│  • Real-time monitoring and observability                                     │
│  • Scalable microservices architecture                                        │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🔧 CONFIGURATION & ENVIRONMENT                                               │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Environment Variables:                                                        │
│  • PINECONE_API_KEY - Vector database access                                  │
│  • LANGSMITH_API_KEY - Monitoring and tracing                                 │
│  • OLLAMA_BASE_URL - Local LLM server URL                                     │
│  • OLLAMA_TEXT_MODEL - Text generation model                                  │
│  • OLLAMA_VISION_MODEL - Image analysis model                                │
│  • DEBUG - Development mode flag                                              │
│  • APP_HOST/APP_PORT - Server configuration                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  📈 PERFORMANCE CHARACTERISTICS                                               │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Response Times:                                                               │
│  • Text queries: 1-3 seconds                                                  │
│  • Image analysis: 3-5 seconds                                                │
│  • PDF processing: 5-10 seconds                                               │
│  • Medicine lookups: 1-2 seconds                                              │
│  • Web searches: 2-4 seconds                                                  │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Scalability:                                                                  │
│  • Horizontal scaling via FastAPI                                             │
│  • Stateless agent design                                                     │
│  • External vector database (Pinecone)                                        │
│  • Caching for tool selection and responses                                   │
│  • Circuit breaker pattern for resilience                                     │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🚀 DEPLOYMENT & OPERATIONS                                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Development Setup:                                                            │
│  1. Install dependencies: pip install -r requirements.txt                     │
│  2. Set up environment variables in .env file                                 │
│  3. Initialize Pinecone vector database                                       │
│  4. Start Ollama server with required models                                  │
│  5. Run data ingestion scripts                                                │
│  6. Start FastAPI server: python app.py                                       │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Production Considerations:                                                    │
│  • Use production ASGI server (Gunicorn + Uvicorn)                            │
│  • Configure proper logging and monitoring                                    │
│  │ • Set up reverse proxy (Nginx)                                            │
│  │ • Implement health checks and alerts                                       │
│  │ • Configure backup and recovery procedures                                 │
│  │ • Monitor resource usage and performance                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  🔍 DEBUGGING & TROUBLESHOOTING                                               │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Common Issues:                                                                │
│  • OCR failures on blurry or handwritten text                                 │
│  • RAG context retrieval timeouts                                             │
│  • Web search API rate limits                                                 │
│  • LLM model loading and memory issues                                        │
│  • Vector database connection problems                                        │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  Debugging Tools:                                                              │
│  • LangSmith traces for request flow analysis                                 │
│  • Comprehensive logging throughout the system                                │
│  • Health check endpoints for component status                                │
│  • Tool execution statistics and metrics                                      │
│  • Error tracking and alerting                                                │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  📋 SUMMARY                                                                     │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│  AroBot is a sophisticated LLM-as-Agent medical chatbot system that:           │
│                                                                                 │
│  • Uses intelligent tool selection to automatically choose the right           │
│    processing pipeline for each user request                                   │
│                                                                                 │
│  • Supports multi-modal input (text, images, PDFs) with specialized           │
│    processing for each type                                                     │
│                                                                                 │
│  • Leverages RAG (Retrieval-Augmented Generation) to provide accurate,         │
│    context-aware medical information                                           │
│                                                                                 │
│  • Maintains conversation memory and context across sessions                   │
│                                                                                 │
│  • Provides comprehensive monitoring and observability through LangSmith       │
│                                                                                 │
│  • Scales horizontally and handles high-volume medical queries efficiently     │
│                                                                                 │
│  The system architecture follows modern microservices patterns with clear      │
│  separation of concerns, making it maintainable and extensible for future      │
│  medical AI applications.                                                      │
└─────────────────────────────────────────────────────────────────────────────────┘